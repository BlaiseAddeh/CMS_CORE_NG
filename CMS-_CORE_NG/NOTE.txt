========= GIT ===========

echo "# CMS_CORE_NG" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/BlaiseAddeh/CMS_CORE_NG.git
git push -u origin main

or push an existing repository from the command line

git remote add origin https://github.com/BlaiseAddeh/CMS_CORE_NG.git
git branch -M main
git push -u origin main


======== Application
git init
git add CMS-_CORE_NG/*
git status
git commit -m "Initial commit"

git remote add origin https://github.com/BlaiseAddeh/CMS_CORE_NG.git
git branch -M main
git push -u origin main


========== NOTE FOR GIT ========
git branch.  ——> permet de lister toutes mes branches  

Creation de nouvelle branche
git branch dev  ———> Creation de la branch dev

Basculer sur la branche dev
git checkout dev

NB: Dans la branche dev, on retrouve les memes fichiers présents dans la branche à partir de laquelle la branche dev a été créée.

Supprimer une branche
git branch -D dev

Créer et basculer directement sur une branche:
git checkout -b dev 

Si dans la branch on a créé des fichiers  supplémentaires, après avoir faire leurs commit, tant que le merge n’a pas été fait, ils ne seront pas visibles au niveau de la master.

Git merge main

*****CHAP I ********* Implementing Logging Service with SeriLog Library ****************

LoggingService doit être ajouter comme reference  dans
le projet CMS-_CORE_NG

> dotnet add package Serilog.Sinks.File
> dotnet add package Serilog.Sinks.Console
> dotnet add package Serilog.Settings.Configuration
> dotnet add package Serilog.Sinks.Async

*****CHAP II ******* Create database with EntityFrameworkCore

** Dans le projet DataService

> dotnet add package Microsoft.AspNetCore.DataProtection.EntityFrameworkCore --version=5.0.1
> dotnet add package Microsoft.AspNetCore.Identity.EntityFrameworkCore --version=5.0.1
> dotnet add package Microsoft.EntityFrameworkCore.Design --version=5.0.1
> dotnet add package Microsoft.EntityFrameworkCore.Tools --version=5.0.1

** Dans le projet ModelService

> dotnet add package Microsoft.AspNetCore.Identity.EntityFrameworkCore --version=5.0.1


** Projet FunctionalSvc

Il faut installer la meme version de Identity.EntityFrameworkCore que dans le ModelService

> dotnet add package Microsoft.AspNetCore.Identity.EntityFrameworkCore --version=5.0.1


** Mise en place des script de migration

1- Dans le Projet Api (CMS-_CORE_NG), Ajouter la reference au projet DataService
2- Placer la chaine de connexion dans le fichier appsettings.json

-----------
 "ConnectionStrings": {
    "CmsCorNg_DEV": "Server=localhost;Database=CmsCorNg_DEV;User=sa;Password=@zerty.123#;",
    "DataProtectionKeysContext": "Server=.;Database=DataProtectionKeysContext;User=sa;Password=@zerty.123#;"
  },
-----------

3- Ajouter des packages Nuget

> dotnet add package Microsoft.EntityframeworkCore.Design --version=5.0.1
> dotnet add package Microsoft.EntityframeworkCore.SqlServer --version=5.0.1
> dotnet add package Microsoft.Extensions.DependencyInjection --version=6.0.0


NB: L'appelle de la méthodes d'initialisation de la base de données se fait depuis
    Program.cs

------------

public class Program
    {
        public static void Main(string[] args)
        {
            var host = CreateHostBuilder(args).Build();

            using (var scope = host.Services.CreateScope())
            {
                var services = scope.ServiceProvider;
                try
                {
                    var context = services.GetRequiredService<ApplicationDbContext>();
                    var dpcontext = services.GetRequiredService<DataProtectionKeysContext>();
                    var functionSvc = services.GetRequiredService<IFunctionalSvc>();

                    DbContextInitializer.Initialize(dpcontext, context, functionSvc).Wait();

                }
                catch (Exception ex)
                {
                    .....
                }
            }

            host.Run();
        }

------------

 /*--------------------------------------------------------*/
 /*               DB CONNECTION OPTIONS                    */
 /*--------------------------------------------------------*/

  ......

 /*--------------------------------------------------------*/
 /*                   Functional Service                   */
 /*--------------------------------------------------------*/

 .......

 /*--------------------------------------------------------*/
 /*                   Default Identity Options             */
 /*--------------------------------------------------------*/

 .......

3 - Ouvrir le projet webApi dans le terminal

> dotnet ef migrations add InitialCreate --context ApplicationDbContext
> dotnet ef migrations add InitialCreate --context DataProtectionKeysContext

NB: Les 02 Scripts ci dessus crée les dossier de migration mais pas les bases de données.

Pour generer les bases de données, il faut exécuter l'application













